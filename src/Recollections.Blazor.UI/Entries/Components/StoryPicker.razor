<Modal @ref="Modal" Title="Select a Story or Chapter" CssClass="stories">
    <ChildContent>
        @if (!String.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger">
                @ErrorMessage
            </div>
        }

        <div class="d-grid gap-3">
            <ListView Items="@Stories" IsLoading="@IsLoading" EmptyMessage="You don't have any story..." Context="story">
                <div class="d-flex align-items-start">
                    <StoryCard Model="story" OnTitleClick="@(async () => await SelectAsync(story, null))" OnChaptersClick="@(async () => await LoadChaptersAsync(story))" CardCssClass="@($"flex-grow-1 {(SelectedStoryId == story.Id ? "selected" : string.Empty)}")">
                        <AfterTitleContent>
                            @if (story.Chapters > 0)
                            {
                                <span class="cursor-pointer" @onclick="(async () => await LoadChaptersAsync(story))">
                                    <Icon Identifier="@((ToggleStates.TryGetValue(story.Id, out var toggledForIcon) && toggledForIcon) ? "chevron-down" : "chevron-left")" CssClass="fs-5" />
                                </span>
                            }
                        </AfterTitleContent>
                        <EndBodyContent>
                            @if (ToggleStates.TryGetValue(story.Id, out var toggled) && toggled && Chapters.TryGetValue(story.Id, out var chapters))
                            {
                                <hr />
                                @foreach (var chapter in chapters)
                                {
                                    <div class="pb-2">
                                        <a class="@(SelectedChapterId == chapter.Id ? "fw-bold" : string.Empty)" @onclick="(async () => await SelectAsync(story, chapter))" @onclick:stopPropagation="true">
                                            @chapter.Title
                                        </a>
                                    </div>
                                }
                            }
                        </EndBodyContent>
                    </StoryCard>
                    <button class="btn btn-link p-0 mt-2 ms-2 fs-3 text-secondary" @onclick="@(() => { Modal.Hide(); Navigator.OpenStoryDetail(story.Id); })">
                        <Icon Identifier="circle-info" />
                    </button>
                </div>
            </ListView>
        </div>
    </ChildContent>
    <Buttons>
        <button class="btn btn-sm btn-secondary" @onclick="(async () => await SelectAsync(null, null))">Don't select a story</button>
    </Buttons>
</Modal>