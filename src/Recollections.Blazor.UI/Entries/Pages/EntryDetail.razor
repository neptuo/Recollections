@page "/entries/{EntryId}"
@inherits UserStateComponentBase

@if (Model != null)
{
    <DocumentTitle Value="@Model.Title" />

    <CascadingValue Value="@Model">
        <PermissionContainer State="@Permissions">
            <div @ref="Container" class="entry-detail">
                <h2 class="title d-flex">
                    <InlineTextEdit Value="@Model.Title" ValueChanged="@(async value => await SaveTitleAsync(value))" EditModeCssClass="flex-grow-1" />
                    <DropdownButton CssClass="ms-1">
                        <PermissionView Request="PermissionRequest.Owner">
                            <ShareButton Owner="@Owner" EntryId="@EntryId" Layout="ButtonLayout.DropdownItem" />
                        </PermissionView>
                        <ShareLinkButton Layout="ButtonLayout.DropdownItem" />
                        <PermissionView Request="PermissionRequest.Owner">
                            <DropdownSeparator />
                            <DropdownItem Icon="trash-alt" Text="Delete Entry" OnClick="DeleteAsync" CssClass="text-danger" Title="Delete Entry" />
                        </PermissionView>
                    </DropdownButton>
                </h2>
                <div class="datetime">
                    <InlineDateEdit Value="@Model.When" ValueChanged="@(async value => await SaveWhenAsync(value))" Format="@UiOptions.DateFormat" />
                </div>
                <div class="story">
                    <InlineLink Value="@StoryTitle" PlaceHolder="No story..." Icon="book" OnClick="@SelectStory" />
                </div>
                <UserInformation Owner="@Owner" />
                <div class="being">
                    <InlineLink Value="@BeingsTitle" PlaceHolder="No beings..." Icon="user-friends" OnClick="@SelectBeing" />
                </div>
                <div class="gps">
                    <MapToggle Text="@($"Show Locations on Map ({MarkerCount})")" IsPlaceHolder="@(MarkerCount == 0)" IsEnabled="@(MarkerCount != 0 || Permissions.IsEditable)">
                        <Neptuo.Recollections.Components.Map Markers="@Markers" MarkersChanged="@(async () => await SaveLocationsAsync())" IsAdditive="true" MarkerSelected="OnLocationSelected" PointOfInterest="PoiToggleButton" />
                    </MapToggle>
                </div>
                <div class="text">
                    <InlineMarkdownEdit Value="@Model.Text" PlaceHolder="No description..." ValueChanged="@(async value => await SaveTextAsync(value))" />
                </div>
                <div class="images">
                    @if (Images != null)
                    {
                        <Gallery @ref="Gallery" Models="@GalleryItems" DataGetter="OnGetImageDataAsync" OnOpenInfo="(async i => { await Gallery.CloseAsync(); Navigator.OpenImageDetail(EntryId, Images[i].Id); })" />

                        @foreach (var image in Images)
                        {
                            <EntryImage Image="@image" OnClick="(() => Gallery.Open(Images.IndexOf(image)))">
                                <ThumbnailContent>
                                    <button class="btn btn-outline-primary border-0 p-0" @onclick="(async () => { Navigator.OpenImageDetail(EntryId, image.Id); })" @onclick:stopPropagation="true">
                                        <Icon Identifier="info-circle" Prefix="fas" CssClass="p-1" />
                                    </button>
                                </ThumbnailContent>
                            </EntryImage>
                        }
                    }

                    @if (UploadProgress != null)
                    {
                        foreach (var upload in UploadProgress)
                        {
                            @if (upload.IsSuccess)
                            {
                                <EntryImage Image="@upload.Image" />
                            }
                            else
                            {
                                <EntryImage PlaceHolder="@upload.Description" PlaceHolderCssClass="@upload.StatusCssClass" />
                            }
                        }
                    }

                    <div class="clear"></div>
                </div>

                <ActionPanel>
                    <PermissionView Request="@PermissionRequest.Write">
                        <FileUpload Url="@Api.ImageUploadUrl(Model.Id)"
                                    BearerToken="@UserState.BearerToken"
                                    Progress="@(async e => await OnUploadProgressAsync(e))"
                                    DragAndDropContainer="Container" />
                    </PermissionView>
                </ActionPanel>
            </div>
        </PermissionContainer>
    </CascadingValue>

    <Modal @ref="@LocationEdit" Title="Location" OnFormSubmit="@(async () => await SaveSelectedLocationAsync())">
        <ChildContent>
            @if (SelectedLocation != null)
            {
                <div class="mb-3">
                    <label for="latitude">Latitude:</label>
                    <input type="text" class="form-control" @bind="@SelectedLocation.Latitude" />
                </div>
                <div class="mb-3">
                    <label for="latitude">Longitude:</label>
                    <input type="text" class="form-control" @bind="@SelectedLocation.Longitude" />
                </div>
                <div class="mb-3">
                    <label for="latitude">Altitude:</label>
                    <input type="text" class="form-control" @bind="@SelectedLocation.Altitude" />
                </div>
            }
        </ChildContent>
        <Buttons>
            <button type="button" class="btn btn-sm btn-primary" @onclick="@(async () => await SaveSelectedLocationAsync())" title="Save Location">
                Save
            </button>
            <button type="button" class="btn btn-sm btn-danger" @onclick="@(async () => await DeleteSelectedLocationAsync())" title="Delete Location">
                <Icon Identifier="trash-alt" />
                Delete
            </button>
        </Buttons>
    </Modal>

    <Modal @ref="@UploadError" Title="Upload Error">
        <ChildContent>
            @{
                var message = $"Some uploads ({UploadErrors.Count}) finished with errors.";
            }
            <Alert Mode="AlertMode.Warning" Message="@message" />

            <table class="table table-sm table-hover">
                <thead>
                    <tr>
                        <th scope="col">File</th>
                        <th scope="col">Error</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var error in UploadErrors)
                    {
                        <tr>
                            <td>
                                @error.Progress.Name
                            </td>
                            <td>
                                @error.Description (@error.Progress.StatusCode)
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

        </ChildContent>
    </Modal>

    <StoryPicker @ref="StoryPicker" Selected="StorySelectedAsync" />
    <BeingPicker @ref="BeingPicker" Selected="BeingSelectedAsync" />
}
