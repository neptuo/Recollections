@page "/entries/{EntryId}/images/{ImageId}"
@inherits UserStateComponentBase

@if (Model != null)
{
    <DocumentTitle Value="@Model.Name" />

    <PermissionContainer State="@Permissions">
        <div class="image-detail">
            <h2 class="title d-flex">
                <InlineTextEdit Value="@Model.Name" PlaceHolder="Unnamed image..." ValueChanged="@(async value => await SaveNameAsync(value))" EditModeCssClass="flex-grow-1" />
                <DropdownButton CssClass="ms-1">
                    <DropdownItem Icon="cloud-download" Text="Download Original" OnClick="DownloadOriginalAsync" Title="Download Original Image" />
                    <ShareLinkButton Layout="ButtonLayout.DropdownItem" />
                    <PermissionView Request="PermissionRequest.Write">
                        <DropdownItem Icon="location-arrow" Text="Set Location from Original" OnClick="SetLocationOriginalAsync" Title="Set Location from Original Image" />
                        <DropdownSeparator />
                        <DropdownItem Icon="trash-alt" Text="Delete Image" OnClick="DeleteAsync" CssClass="text-danger" Title="Delete Image" />
                    </PermissionView>
                </DropdownButton>
            </h2>
            <div class="datetime">
                <InlineDateEdit Value="@Model.When" ValueChanged="@(async value => await SaveWhenAsync(value))" Format="@UiOptions.DateFormat" IsTimeSelection="true" />
            </div>
            @if (EntryId != null)
            {
                <InlineLink Icon="comment" Value="@EntryModel.Title" OnClick="@(() => Navigator.OpenEntryDetail(EntryId))" />
            }
            <UserInformation Owner="@Owner" />
            <div class="gps">
                <MapToggle ToggleChanged="@GetMapDescription" IsPlaceHolder="@(!Model.Location.HasValue())" IsEnabled="@(Model.Location.HasValue() || Permissions.IsEditable)">
                    <Neptuo.Recollections.Components.Map Markers="@Markers" MarkersChanged="@(async () => await SaveLocationAsync())" OnClearLocation="@OnClearLocationAsync" />
                </MapToggle>
            </div>
            <div class="text">
                <InlineMarkdownEdit Value="@Model.Description" PlaceHolder="No description..." ValueChanged="@(async value => await SaveDescriptionAsync(value))" />
            </div>
            <EntryImage EntryId="@EntryId" Image="@Model" ImageType="@ImageType.Preview" />
        </div>
    </PermissionContainer>
}
